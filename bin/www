#!/usr/bin/env node
const debug = require('debug')('express')
const models = require('../api/models')
const app = require('../app')

const port = normalizePort(process.env.PORT || 3000)
app.set('port', port)

models.sequelize.sync()
  .then(() => {
    const server = app.listen(app.get('port'), () => {
      debug('Express server listening on port ' + server.address().port)
    })
    server.on('error', onError)
    server.on('listening', () => {
      const addr = server.address()
      const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
      debug('Listening on ' + bind)
    })
  })

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

function normalizePort (val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) {
    return val
  }
  if (port >= 0) {
    return port
  }
  return false
}
